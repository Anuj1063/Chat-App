  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Chatty</title>
      <link rel="stylesheet" href="/css/chat.css" />
      <link rel="icon" href="/assets/logo.png" type="image/png" />
    </head>
    <body>
    <div class="app">
      <aside class="sidebar">
        <div class="logo">
          <img src="/assets/logo.png" style="width: 60px;" alt="">
          <span class="title">Chatty</span>
        </div>
        <div class="contacts">
          <h3>Contacts</h3>
          <ul class="contact-list">
            <% users.map((user) => { %>
            <li class="contact" data-user-id="<%= user._id %>">
              <img
                src="<%= user.profilePic ? `/uploads/${user.profilePic}` : '/uploads/avatar.png' %>"
              />
              <div>
                <p class="name"><%= user.fullName %></p>
                <p class="status">
                  <span
                    class="status-dot <%= onlineUsers.includes(user._id.toString()) ? 'online' : 'offline' %>"
                  ></span>
                  <%= onlineUsers.includes(user._id.toString()) ? 'Online' :
                  'Offline' %>
                </p>
              </div>
            </li>

            <% }) %>
          </ul>
        </div>
      </aside>

      <main class="main">
        <header class="topbar">
          <div class="settings-dropdown">
            <button
              class="top-btn settings-btn"
              id="settings-btn"
              aria-label="Settings ‚öôÔ∏è"
            >
              ‚öôÔ∏è
            </button>
            <div class="dropdown-menu" id="dropdown-menu" style="display: none">
              <button class="dropdown-item profile">Profile</button>
              <button class="dropdown-item logout">Logout</button>
            </div>
          </div>
        </header>

        <div class="welcome">
          <div class="chat-icon"><img src="/assets/logo.png" alt=""></div>
          <h1>Welcome to Chatty!</h1>
          <p>Select a conversation from the sidebar to start chatting</p>
        </div>
      </main>
    </div>

    <script src="/socket.io/socket.io.js"></script>

    <script>
      const socket = io({
        query: { userId: "<%= currentUser._id %>" },
      });

      socket.on("connect", () => {
        console.log("‚úÖ Socket connected:", socket.id);
      });

      socket.on("getOnlineUsers", (users) => {
        const countSpan = document.querySelector(".count");
        if (countSpan) countSpan.textContent = `(${users.length} online)`;

        document.querySelectorAll(".contact").forEach((contact) => {
          const userId = contact.getAttribute("data-user-id");
          const statusEl = contact.querySelector(".status");

          if (users.includes(userId)) {
            statusEl.textContent = "Online";
            statusEl.style.color = "lightgreen";
          } else {
            statusEl.textContent = "Offline";
            statusEl.style.color = "#ccc";
          }
        });

        const checkbox = document.querySelector(".online-only input");
        if (!checkbox) return;
        const showOnlineOnly = checkbox.checked;

        document.querySelectorAll(".contact").forEach((contact) => {
          const userId = contact.getAttribute("data-user-id");
          const isOnline = users.includes(userId);
          contact.style.display = showOnlineOnly && !isOnline ? "none" : "flex";
        });
      });

      document
        .querySelector(".online-only input")
        ?.addEventListener("change", () => {
          socket.emit("requestOnlineUsers");
        });

      socket.on("receiveMessage", (message) => {
        const chatBody = document.querySelector(".chat-body");
        if (chatBody) {
          const cls =
            message.senderId === "<%= currentUser._id %>" ? "sent" : "received";
          const msgEl = document.createElement("div");
          msgEl.className = `message ${cls}`;
          msgEl.textContent = message.text;
          chatBody.appendChild(msgEl);
        }
      });
    </script>

    <script>
      const contacts = document.querySelectorAll(".contact");
      const main = document.querySelector(".main");
      const currentUserId = "<%= currentUser._id %>";

      contacts.forEach((contact) => {
        contact.addEventListener("click", async () => {
          const name = contact.querySelector(".name").innerText;
          const userId = contact.getAttribute("data-user-id");

          try {
            const res = await fetch(`/api/messages/${userId}`);
            const messages = await res.json();

            const messageHTML = messages
              .map((msg) => {
                const cls =
                  msg.senderId === currentUserId ? "sent" : "received";
                const text = msg.text || "";
                const image = msg.image
                  ? `<img src="${msg.image}" style="max-width:100%" />`
                  : "";
                return `<div class="message ${cls}">${text}${image}</div>`;
              })
              .join("");

            main.innerHTML = `
          <header class="topbar">
            <div class="settings-dropdown">
              <button class="top-btn settings-btn" id="settings-btn" aria-label="Settings ‚öôÔ∏è">‚öôÔ∏è</button>
              <div class="dropdown-menu" id="dropdown-menu" style="display:none;">
                <button class="dropdown-item profile">Profile</button>
                <button class="dropdown-item logout">Logout</button>
              </div>
            </div>
          </header>
          <div class="chat-window">
            <div class="chat-header"><span class="chat-user">${name}</span></div>
            <div class="chat-body">${messageHTML}</div>
            <div class="chat-input">
              <input type="text" name="text" placeholder="Type a message..." />
              <button>Send</button>
            </div>
          </div>
        `;

            // Re-bind UI actions
            initSettingsDropdown();
            bindProfileLogout();

            const input = document.querySelector(".chat-input input");
            const sendButton = document.querySelector(".chat-input button");
            const chatBody = document.querySelector(".chat-body");

            sendButton.addEventListener("click", async () => {
              const message = input.value.trim();
              if (!message) return;

              const res = await fetch(`/api/messages/send/${userId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ text: message }),
              });

              const newMessage = await res.json();

              const div = document.createElement("div");
              div.className = "message sent";
              div.textContent = newMessage.text;
              chatBody.appendChild(div);

              input.value = "";
              chatBody.scrollTop = chatBody.scrollHeight;
            });
          } catch (err) {
            console.error("Error fetching messages", err);
          }
        });
      });

      // üîß Dropdown toggle logic
      function initSettingsDropdown() {
        const settingsBtn = document.querySelector("#settings-btn");
        const dropdownMenu = document.querySelector("#dropdown-menu");

        if (!settingsBtn || !dropdownMenu) return;

        settingsBtn.addEventListener("click", (e) => {
          e.stopPropagation();
          dropdownMenu.style.display =
            dropdownMenu.style.display === "flex" ? "none" : "flex";
        });

        document.addEventListener("click", (e) => {
          if (
            !settingsBtn.contains(e.target) &&
            !dropdownMenu.contains(e.target)
          ) {
            dropdownMenu.style.display = "none";
          }
        });
      }

      // üîÅ Reusable button action binder
      function bindProfileLogout() {
        const profileBtn = document.querySelector(".dropdown-item.profile");
        const logoutBtn = document.querySelector(".dropdown-item.logout");

        if (profileBtn) {
          profileBtn.addEventListener("click", () => {
            window.location.href = "/add-profile-form";
          });
        }

        if (logoutBtn) {
          logoutBtn.addEventListener("click", async () => {
            try {
              await fetch("/logout", { method: "POST" });
              window.location.href = "/login-form";
            } catch (err) {
              console.error("Logout failed", err);
            }
          });
        }
      }

      // üëá Call both once on page load
      initSettingsDropdown();
      bindProfileLogout();
    </script>
  </body>
</html>
